process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';

import { app, BrowserWindow, globalShortcut, Menu } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_WEBPACK_ENTRY: string;

function isDev() {
    const isEnvSet = 'ELECTRON_IS_DEV' in process.env;
    const getFromEnv = Number.parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;

    return isEnvSet ? getFromEnv : !app.isPackaged;
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    if (!isDev()) {
        Menu.setApplicationMenu(null);

        globalShortcut.register('Control+Shift+I', () => {
            return false;
        });
    }

    // Create the browser window.
    const loading = new BrowserWindow({
        width: 600,
        height: 600,
        show: false,
        frame: false,
        resizable: false,
    });

    const mainWindow = new BrowserWindow({
        height: 800,
        width: 1300,
        minWidth: 1200,
        minHeight: 550,
        icon: '/src/assets/img/icon',
        show: false,
        webPreferences: {
            webSecurity: false,
            devTools: false,
        },
    });

    loading.once('show', () => {
        mainWindow.webContents.once('dom-ready', () => {
            setTimeout(() => {
                mainWindow.show();
                loading.hide();
                loading.close();
            }, 1000);
        });
        // long loading html
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    });

    loading.loadURL(SPLASH_WINDOW_WEBPACK_ENTRY);
    loading.show();
    // and load the index.html of the app.
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
